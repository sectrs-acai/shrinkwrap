# Copyright (c) 2022, Arm Limited.
# SPDX-License-Identifier: MIT

%YAML 1.2
---
description: >-
  Best choice for: I want to run Linux on FVP, booting with ACPI, and have easy
  control over its command line.

  Brings together TF-A and EDK2 to provide a simple non-secure world environment
  running on FVP. Allows easy specification of the kernel image and command
  line, and rootfs at runtime (see rtvars). ACPI is provided by UEFI.

  By default (if not overriding the rtvars) a sensible command line is used that
  will set up the console for logging and attempt to mount the rootfs image from
  the FVP's virtio block device. However the default rootfs image is empty, so
  the kernel will panic when attempting to mount; the user must supply a rootfs
  if it is required that the kernel completes its boot. No default kernel image
  is supplied and the config will refuse to run unless it is explicitly
  specified.

  Note that by default, a pre-canned flash image is loaded into the model, which
  contains UEFI variables directing EDK2 to boot to the shell. This will cause
  startup.nsh to be executed and will start the kernel boot. This way everything
  is automatic. By default, all EDK2 output is muxed to stdout. If you prefer
  booting UEFI to its UI, override the EDK2FLASH rtvar with an empty string and
  override terminals.'bp.terminal_0'.type to 'telnet'.

concrete: true

layers:
  - FVP_Base_RevC-2xAEMvA-base.yaml
  - tfa-base.yaml
  - edk2-base.yaml

build:
  tfa:
    params:
      BL33: ${artifact:EDK2}

  edk2flash:
    artifacts:
      EDK2FLASH: ${param:configdir}/edk2-flash.img

run:
  rtvars:
    BL1:
      type: path
      value: ${artifact:BL1}

    FIP:
      type: path
      value: ${artifact:FIP}

    CMDLINE:
      type: string
      value: console=ttyAMA0 earlycon=pl011,0x1c090000 root=/dev/vda ip=dhcp

    KERNEL:
      type: path
      value: null

    ROOTFS:
      type: path
      value: ''

    EDK2FLASH:
      type: path
      value: ${artifact:EDK2FLASH}

  params:
    -C bp.secureflashloader.fname: ${rtvar:BL1}
    -C bp.flashloader0.fname: ${rtvar:FIP}
    -C bp.virtioblockdevice.image_path: ${rtvar:ROOTFS}
    -C cluster0.cpu0.semihosting-cwd: ${param:packagedir}
    -C bp.flashloader1.fname: ${rtvar:EDK2FLASH}

  prerun:
    # We use the FVP's and UEFI's semihosting capability to get the images into
    # the system. Wrap this up as a command in the startup.nsh along with the
    # command line. UEFI will execute this when entering its shell. Copy the
    # images to the package directory (which is the root of our semihosting
    # environment) then refer to them by its base name to UEFI.
    - cp ${rtvar:KERNEL} ${param:packagedir}
    - cat <<EOF > ${param:packagedir}/startup.nsh
    - $$(basename ${rtvar:KERNEL}) ${rtvar:CMDLINE}
    - EOF

  terminals:
    bp.terminal_0:
      friendly: tfa+edk2+linux
      type: stdinout
    bp.terminal_1:
      friendly: edk2
